#!/bin/bash
# By Yoann Delouis (ydelouis) <ydelouis@gmail.com>
# Inspired by Romain Vimont (®om) <rom@rom1v.com>
# And Martin Gondermann (magicmonty)
#
# Link this file to ~/gitbashprompt and replace 'PS1' initialization in your
# ~/.bashrc by:
#    . /full/path/to/your/gitbashprompt
#
# See <http://blog.rom1v.com/2012/04/prompt-bash-pour-git/>

### Get colors for non git part
__user_color="0"
__machine_color="0"
__path_color="0"
if [ $# -gt 0 ] 
then
  __user_color="$1"
fi
if [ $# -gt 1 ]
then 
  __machine_color="$2"
fi
if [ $# -gt 2 ] 
then
  __path_color="$3"
fi

########################### Git part ###################################

_GIT_COLOR_BRANCH="\033[1;31m"
_GIT_COLOR_CONFLICT="\033[1;31m"
_GIT_COLOR_CLEAN="\033[1;32m"

_GIT_SYMBOL_AHEAD='↑'
_GIT_SYMBOL_BEHIND='↓'
_GIT_SYMBOL_CONFLICT='✘'
_GIT_SYMBOL_STAGED='●'
_GIT_SYMBOL_UNSTAGED='~'
_GIT_SYMBOL_UNTRACKED='…'
_GIT_SYMBOL_CLEAN='✔'

_GIT_BRANCH() {
  gitinfo="$(git branch 2>/dev/null | sed -n 's/^* //p')"
  if [ "$gitinfo" ]
  then
    if [ "$gitinfo" = "(no branch)" ]
    then
      gitinfo="$(git describe 2>/dev/null ||
                 git rev-list HEAD -1 | cut -c-7)"
    fi
      printf "$gitinfo"
  fi
}

_GIT_BRANCH_STATUS() {
  branch=$(git branch 2>/dev/null | sed -n 's/^* //p')
  if [ "$branch" != "(no branch)" ]
  then
    remote=$(git config branch."$branch".remote 2>/dev/null) &&
    rmbranch=$(git config branch."$branch".merge 2>/dev/null | cut -c 12-) &&
    revlist=$(git rev-list --left-right refs/remotes/"$remote"/"$rmbranch"...HEAD 2>/dev/null) &&
    (
      ahead=$(echo "$revlist" | grep -c "^>")
      behind=$(echo "$revlist" | grep -c "^<")
      if [ $ahead != "0" ]
      then
        printf "$_GIT_SYMBOL_AHEAD$ahead"
      fi
      if [ $behind != "0" ]
      then
        printf "$_GIT_SYMBOL_BEHIND$behind"
      fi
      if [ $ahead != "0" -o $behind != "0" ]
      then
        printf "|"
      fi
    )
  fi
}

_GIT_STATUS() {
  sstatus=$(git status --porcelain | cut -c 1-2)
  conflict=$(echo "$sstatus" | grep -c -e "DD" -e "AA" -e "U")
  if [ $conflict != "0" ]
  then
    printf "$_GIT_COLOR_CONFLICT$conflict$_GIT_SYMBOL_CONFLICT\033[00m"
  else
    staged=$(echo "$sstatus" | grep -c -e "^M" -e "^A" -e "^D" -e "^R" -e "^C")
    unstaged=$(echo "$sstatus" | grep -c -e "M$" -e "D$")
    untracked=$(echo "$sstatus" | grep -c "??")
    if [ $staged != "0" -o $unstaged != "0" -o $untracked != "0" ]
    then
      if [ $staged != "0" ]
      then
        printf "$_GIT_SYMBOL_STAGED$staged"
      fi
      if [ $unstaged != "0" ]
      then
        printf "$_GIT_SYMBOL_UNSTAGED$unstaged"
      fi
      if [ $untracked != "0" ]
      then
        printf "$_GIT_SYMBOL_UNTRACKED$untracked"
      fi
    else
      printf "$_GIT_COLOR_CLEAN$_GIT_SYMBOL_CLEAN\033[00m"
    fi
  fi
}

_GIT() {
  hasGit="$(git status 2> /dev/null)"
  if [ "$hasGit" ]
  then
     printf "on $_GIT_COLOR_BRANCH$(_GIT_BRANCH)\033[00m ($(_GIT_BRANCH_STATUS)$(_GIT_STATUS))\033[00m"
  fi
}

########################### Git part ###################################

PS1='${debian_chroot:+($debian_chroot)}
\[\033['"$__user_color"'m\]\u\[\033[00m\] at \[\033['"$__machine_color"'m\]\h\[\033[00m\] in \[\033['"$__path_color"'m\]\w\[\033[00m\] $(_GIT)\[\033[00m\] 
\[\033['"$__user_color"'m\]> \[\033[00m\]'
