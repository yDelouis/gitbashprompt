#!/bin/bash
# By Yoann Delouis (ydelouis) <ydelouis@gmail.com>
# Inspired by Romain Vimont (Â®om) <rom@rom1v.com>
# And Martin Gondermann (magicmonty)
#
# Link this file to ~/gitbashprompt and replace 'PS1' initialization in your
# ~/.bashrc by:
#    . /full/path/to/your/gitbashprompt
#
# See <http://blog.rom1v.com/2012/04/prompt-bash-pour-git/>

__git_bash_prompt() {

 ### Init colors
  local nocol='\001\e[0m\002'
  # branch color
  local col='\001\e[36m\002' # blue
  # detached HEAD color
  local dcol='\001\e[31m\002' # red
 ###

 ### Split current path
  SFI="$IFS"
  IFS=/
  local path="$1"
  local folders=($path)
  path=${path/\~/$HOME}
  local count=${#folders[@]}
  IFS="$SFI"
 ### 
 
 ### For all folders of path
  local i=0
  local folder= # current folder for printing
  local efolder= # current folder for using in scripts
  local curpath= # path of folder which is currently written
  local toplevel=$(git rev-parse --show-toplevel 2> /dev/null) # closer git 
  while [ $i -lt $count ]
  do
   ### Set folder and efolder
    folder="${folders[$i]}"
    efolder="$folder"
   ###

   ### Print / before the folder if not the first of if path is only /
    if [ $i -gt 0 -o "$path" = / ]
    then
      printf /
      curpath="$curpath/"
    fi
   ###
 
   ### Deal with ~
    if [ "$folder" = "~" ]
    then
      efolder="$HOME"
    fi
   ###
 
   ### Append efolder to current path 
    curpath="$curpath$efolder"
   ###

   ### Print folder and git infos
    printf "$folder"
    __git_branch 
    if [ "$curpath" = "$toplevel" ]
    then
      __git_status
    fi
   ###

   ### Increment i
    i=$(($i+1))
   ###
  done
}

__git_branch() {
  cd "$curpath"
  if [ -e .git ]
  then
    gitinfo="$(git branch 2>/dev/null | sed -n 's/^* //p')"
    if [ "$gitinfo" ]
    then
      if [ "$gitinfo" = "(no branch)" ]
      then
        gitinfo="$(git describe 2>/dev/null ||
                   git rev-list HEAD -1 | cut -c-7)"
        printf $col@$dcol"$gitinfo"$nocol
      else
        printf $col@"$gitinfo"$nocol
      fi
    fi
  fi
  cd "$path"
}

__git_status() {
  cd "$curpath"
  status=$(git status --porcelain) 
  staged=$(echo "$status" | grep -c "^A") 
  unstaged=$(echo "$status" | grep -c "^U")
  conflict=$(echo "$status" | grep -c "^U")
  untracked=$(echo "$status" | grep -c "^??")
  printf $col"("
  printf "$staged $unstaged $conflict $untracked"
  printf ")"$nocol
  cd "$path"
}

PS1='\u@\h:$(__git_bash_prompt "\w")\$ '
